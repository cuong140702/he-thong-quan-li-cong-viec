generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  avatarUrl String?
  isOnline  Boolean  @default(false) 
  lastSeen  DateTime?

  tasks         Task[]
  projects      Project[]
  refreshTokens RefreshToken[]
  roleId        String
  role          Role           @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sentMessages     Message[]  @relation("MessageSender")
  receivedMessages Message[]  @relation("MessageReceiver")
  notifications    Notification[] @relation("NotificationReceiver") 
  sentNotifications Notification[] @relation("SenderRelation") 
  webSockets       Websocket[]
}


model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(in_progress)
  deadline    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt DateTime?

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  timeLogs  TimeLog[]
  tags      Tag[]      @relation("TaskTags")
  reminders Reminder[]
  attachments Attachment[]

  @@index([userId])
  @@index([projectId])
  @@index([status])
  @@index([deadline])
}

model Attachment {
  id     String   @id @default(uuid())
  url    String
  task   Task     @relation(fields: [taskId], references: [id])
  taskId String
  @@index([taskId])
  @@index([url])
}


model TimeLog {
  id              String    @id @default(uuid())
  startTime       DateTime
  endTime         DateTime?
  durationMinutes Int?
  note            String?
  createdAt       DateTime  @default(now())

  taskId String
  task   Task   @relation(fields: [taskId], references: [id])

  deletedAt DateTime?

  @@index([taskId])
  @@index([startTime])
}

model Tag {
  id   String @id @default(uuid())
  name String @unique

  tasks Task[] @relation("TaskTags")
  deletedAt DateTime?
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  tasks Task[]

  @@index([userId])
  @@index([name])
}

model Reminder {
  id       String   @id @default(uuid())
  remindAt DateTime
  isSent   Boolean  @default(false)

  taskId String
  task   Task   @relation(fields: [taskId], references: [id])

  @@index([taskId])
  @@index([remindAt])
  @@index([isSent])
}

model RefreshToken {
  id        String   @id @default(uuid())
  refreshToken     String   @unique @db.VarChar(256)
  expiredAt DateTime
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiredAt])
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  description String

  users       User[]
  permissions Permission[] @relation("RolePermissions")

  deletedAt DateTime?

}

model Permission {
  id          String     @id @default(uuid())
  method      HTTPMethod
  description String?
  path        String
  module      String     @default("") @db.VarChar(256)

  roles Role[] @relation("RolePermissions")

  createdAt   DateTime?   @default(now())
  deletedAt DateTime?
}

model Message {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())
  isRead     Boolean  @default(false)

  senderId   String
  receiverId String

  sender     User @relation("MessageSender", fields: [senderId], references: [id])
  receiver   User @relation("MessageReceiver", fields: [receiverId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  content   String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Ai nhận thông báo
  userId String
  user   User     @relation("NotificationReceiver", fields: [userId], references: [id])

  // Ai gửi thông báo
  senderId String?
  sender   User?    @relation("SenderRelation", fields: [senderId], references: [id])

  deletedAt DateTime?

  @@index([userId])
  @@index([isRead])
}


model Websocket {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt DateTime @default(now())
}


enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

enum TaskStatus {
  in_progress
  completed
  break
}
