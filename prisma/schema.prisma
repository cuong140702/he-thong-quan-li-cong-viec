generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks         Task[]
  projects      Project[]
  refreshTokens RefreshToken[]
  roleId        String
  role          Role           @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(in_progress)
  deadline    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  timeLogs  TimeLog[]
  tags      Tag[]      @relation("TaskTags")
  reminders Reminder[]

  @@index([userId])
  @@index([projectId])
  @@index([status])
  @@index([deadline])
}

model TimeLog {
  id              String    @id @default(uuid())
  startTime       DateTime
  endTime         DateTime?
  durationMinutes Int?
  note            String?
  createdAt       DateTime  @default(now())

  taskId String
  task   Task   @relation(fields: [taskId], references: [id])

  @@index([taskId])
  @@index([startTime])
}

model Tag {
  id   String @id @default(uuid())
  name String @unique

  tasks Task[] @relation("TaskTags")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  tasks Task[]

  @@index([userId])
  @@index([name])
}

model Reminder {
  id       String   @id @default(uuid())
  remindAt DateTime
  isSent   Boolean  @default(false)

  taskId String
  task   Task   @relation(fields: [taskId], references: [id])

  @@index([taskId])
  @@index([remindAt])
  @@index([isSent])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiredAt DateTime
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiredAt])
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  description String

  users       User[]
  permissions Permission[] @relation("RolePermissions")
}

model Permission {
  id          String     @id @default(uuid())
  method      HTTPMethod
  description String?
  path        String

  roles Role[] @relation("RolePermissions")
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

enum TaskStatus {
  in_progress
  completed
  break
}
